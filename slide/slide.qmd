---
title: Command Line Programming in R
subtitle: Exploring working automation at the Command Line
format:
  clean-revealjs:
    self-contained: true
author:
  - name: Bilikisu Olatunji
    orcid: 0009-0005-9144-6423
    email: bilqiiswunmi@gmail.com
    affiliations: Business-datalab.com
date: 04-27-2024
editor: 
  markdown: 
    wrap: 72
---

## About Me

::: columns
::: {.column width="50%"}
### Bilikisu Wunmi Olatunji

-   **MSc, Information technology (University of Liverpool)**

-   **Data Scientist, Founder of Business Data Laboratory**.

-   **Founder and co-organizer of Abuja R Users Group and R-Ladies
    Abuja**.

-   **Certified RStudio Instructor in tidyverse and shiny development**

-   **Certified Agile coach and trainer, Product Owner, and Scrum
    Master**.
:::

::: {.column width="50%"}
![](images/qbwoa.jpeg)
:::
:::

# Setting up your working environment {background-color="#B38CB4"}

## Quick Checklist

-   Is git bash and docker on your computer system?

``` bash
git --version
docker --version
```

# Let's get in! {background-color="#B38CB4"}

## What is a command-line interface?

A command-line interface (CLI) is a text-based user interface (UI) used
to run programs, manage computer files and interact with the computer.

## Why CLI?

1.  Greater control of an OS, application and files
2.  Ability to store scripts to automate regular tasks
3.  Organizing your project
4.  Getting and Posting data

Want to know more reasons to learn CLI, [Pat Schloss on Top ten reasons
to learn to use the command line - Expanding your reproducibility
tools](https://www.youtube.com/watch?v=BNG0kdK76WU)

## Terminal vs Shell

-   **a terminal** is a device or program that provides a user interface
-   **a shell** is a command-line interpreter that processes commands

**Common shells include**: - Bash (Bourne Again Shell, Linux), - Zsh
(Linux/macOS), and - PowerShell (Windows).

## Command Line {#sec-crossref}

### Launch Terminal

#### Windows Command Line interface

![](images/launch%20cmd.png)

## Command Line

### Launch Terminal

#### RStudio Terminal

![](images/terminal_rstudio.png){fig-alt="RStudio Terminal"}

## Command Line

### How to get help from the command line

``` bash
help pwd

pwd --help
```

**Note:** Some commands like `man`, `whatis` does not work on windows
terminal

## Command Line

### How to navigate the Bash terminal

| **Command** | **Description**                    |
|:------------|:-----------------------------------|
| `pwd`       | Print working directory            |
| `cd .`      | Navigate into directory            |
| `cd ..`     | Go up one level                    |
| `cd -`      | Go to previous working directory   |
| `cd ~`      | Change directory to home directory |
| `cd /`      | Change directory to root directory |

1.  Present working directory

``` bash
pwd
```

2.  Moving around the terminal

``` bash
cd ~
```

# Working with Directories and Files {background-color="#B38CB4"}

## Directories and Files

### Basic Commands

::: columns
::: {.column width="55%"}
| **Command** | **Description**         |
|:------------|:------------------------|
| `ls`        | List directory contents |
| `mkdir`     | Create directory        |
| `rm`        | Remove/delete file      |
| `rmdir`     | Remove/delete directory |
| `touch`     | Create file             |
| `cp`        | Copy                    |
:::

::: {.column width="45%"}
### List contents

``` bash
ls [-l,-a,-la,-lh, -lth, -R, -F]

ls 

ls -l

ls -a

ls -lth

ls -F Practice

ls -RF Practice
```
:::
:::

## Directories and Files

### List contents - using search criteria i.e. regex

``` bash

ls [si]*

ls *.qmd

ls *.??

ls *.???

ls [[:upper:]]*

ls [[:lower:]]*
```

## Directories and Files

### Create directory

``` bash
mkdir dir1

mkdir dir2 dir3

mkdir dir2/dir2_1
```

Adding new directory to a **non-existing** directory

``` bash
mkdir dir5/dir5_1

mkdir -p dir5/dir5_1
```

## Directories and Files

### Create file

``` bash
touch newfile.R

touch ex/newfile2.R
```

## Directories and Files

### Remove directory

``` bash

rmdir dir1

rmdir dir2/dir2_1
```

**Remove Non-empty directory**

``` bash
rmdir ex

rm ex

rm -RF ex
```

**Remove Non-empty directory - Safer version**

``` bash
rm -R -i ex
```

## Directories and Files

**Remove file**

``` bash
rm old.txt

rm *
```

**Remove all files without restriction**

``` bash
rm -r dir1/
```


## Directories and Files

### Copy Directory/files

``` bash

cp -r dir2 dir1

cp oldtext.txt oldtext_2.txt
```

## Directories and Files

### Move/Rename Files

::: columns
::: {.column width="55%"}
| **Command** | **Description**                                         |
|:------------|:--------------------------------------------------------|
| `mv`        | Move or rename files/directories                        |
| `mv -f`     | Do not prompt for confirmation before overwriting files |
| `mv -i`     | Prompt for confirmation before overwriting files        |
| `mv -n`     | Do not overwrite existing files                         |
| `mv -v`     | Move files in verbose mode                              |
:::

::: {.column width="45%"}
``` bash
# no file extension
mv script1.txt script2

# file extension
mv script2 script2.txt

# file extension
mv script2.txt dir1/script3.R
```
:::
:::

## Directories and Files

### View directories and files

**cat Command** - allow users to view, concatenate, create, copy, merge,
and manipulate file contents.View the Content of File.

**View content of a single file**

``` bash
cat ./Practice/lorem_ipsum/sample1.txt 
```

**View content of more than one file**

``` bash

cat ./Practice/lorem_ipsum/sample1.txt ./Practice/lorem_ipsum/sample2.txt 
```

**View contents of a file starting each line with line numbers**

``` bash

cat -n ./Practice/lorem_ipsum/sample1.txt
```

## Directories and Files

### View directories and files

**Create a file**

``` bash

cat > mycatyytext.txt
1. bash is simple
2. bash is fun
3. bash is awesome
```

Press Enter key to go to the next line. When you are done, press
"CTRL+D" keys to save and exit



# Bash Scripting {background-color="#B38CB4"}

## Start with the Shebang!

``` bash
#!/usr/bin/env bash
```

\*\*Display a sentence at the prompt

``` bash

echo "Hello, World! This is Bilikisu from Nigeria."
```

## Declare environment variables

A simple variable

``` bash
$1
```

Give variable a name

``` bash
myVar=$1
var2=$2
```

## Running R Script at the Command line

Create a simple R script file, my_r_script.R. The run the following code
at the command line prompt

``` bash
Rscript my_r_script.R
```

`Rscript` is a convenience command for running R scripts at the command
line.

The first argument in the vector is the path to the R executable file.
The following are all command-line arguments that affect the behavior of
R. From the R help file:

```         
/usr/lib/R/bin/exec/R
```

## Running R Script at the Command line

| Col1         | Col2                                                         |
|----------------|-------------------------------------------------------|
| --no-echo    | Make R run as quietly as possible                            |
| --no-restore | Donâ€™t restore anything that was created during the R session |
| --file       | Run this file                                                |
| --args       | Pass these arguments to the file being run                   |
|              |                                                              |

## Command Arguments in R Script

The `commandArgs` function extracts all the command line arguments
within an r script and returns them as a vector. Write the following
lines in a file named myscript-args.R:

``` r
args <- commandArgs()
cat(args, sep = "\n")
```

Run at the command line using the code below:

``` bash
Rscript myscript_with_args.R
```

Removing

``` bash
args <- commandArgs(trailingOnly = TRUE)
```

Accessing more than more arguments

``` bash

x <- commandArgs(trailingOnly = TRUE)
```

# Reference {background-color="#B38CB4"}

## References

[Data Science at the Command Line](https://jeroenjanssens.com/dsatcl/)
written by [Jeroen Janssens](https://jeroenjanssens.com/)

[Command Line Basics for R
Users](https://bash-intro.rsquaredacademy.com/)

[Bruno Cunha, 11 Reasons To Learn Bash (A.K.A. Command Line)](https://www.dataquest.io/blog/why-learn-the-command-line/)

[Working at the Command
Line](https://www.youtube.com/watch?v=NSy-WByR8Qo&list=PLmNrK_nkqBpKhP0Jb2XGPoRRfToHF1w-y)
taught by [Pat Schloss](https://riffomonas.org/about/)

[Bash for
Beginners](https://www.youtube.com/playlist?list=PLlrxD0HtieHh9ZhrnEbZKhzk0cetzuX7l)
taught by [Gwyneth Pena-Siguenza](https://twitter.com/madebygps) and
[Josh Duffney](https://twitter.com/joshduffney)

[Appsilon, R Shiny Docker: How To Run Shiny Apps in a Docker
Container](https://www.appsilon.com/post/r-shiny-docker-getting-started)

[Sofware Carpentry's Programming with R: Command-Line
Programs](https://swcarpentry.github.io/r-novice-inflammation/05-cmdline.html)
